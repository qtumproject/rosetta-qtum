FROM ubuntu:22.04 as qtumd-builder

ENV DEBIAN_FRONTEND=non-interactive

# Set the branch name to build
ARG BRANCH_NAME=master

# Install common dependencies
RUN apt-get update && \
    apt-get install -y software-properties-common \
    autoconf automake autotools-dev \
    bsdmainutils  build-essential \
    ca-certificates cmake curl  g++-9 gcc-9 git \
    libcurl4-openssl-dev libevent-dev libtool libtool-bin libgmp-dev libgmp3-dev \
    libboost-all-dev libssl-dev pkg-config binutils bison  libminiupnpc-dev

# Set gcc-9 as default compiler
RUN update-alternatives \
--install /usr/bin/gcc gcc /usr/bin/gcc-9 90 \
--slave /usr/bin/g++ g++ /usr/bin/g++-9 \
--slave /usr/bin/gcov gcov /usr/bin/gcov-9

# Clone the qtum repo and checkout the specified branch
RUN git clone https://github.com/qtumproject/qtum && \
    cd qtum && \
    git checkout ${BRANCH_NAME} && \
    git submodule update --init --recursive

# Install Berkeley DB
WORKDIR /qtum
RUN ./contrib/install_db4.sh `pwd`

# Build qtum dependencies
ENV BDB_PREFIX=/qtum/db4
WORKDIR /qtum/depends
RUN make

# Build qtum binaries
WORKDIR /qtum

RUN TARGET_TRIPLET=$(ls /qtum/depends | grep  -E '.*-.*-.*') && \
    echo "TARGET_TRIPLET value: $TARGET_TRIPLET" && \
    libtool --finish /qtum/depends/"$TARGET_TRIPLET"/lib && \
    export LD_LIBRARY_PATH=/qtum/depends/"$TARGET_TRIPLET"/lib && \
    ./autogen.sh && \
    ./configure --prefix=$PWD/depends/"$TARGET_TRIPLET" && \
    make -j$(nproc)


# Build Rosetta Server Components
FROM ubuntu:20.04 as rosetta-builder

RUN mkdir -p /app \
  && chown -R nobody:nogroup /app
WORKDIR /app

RUN apt-get update && apt-get install -y curl make gcc g++
# Install Golang 1.17.5.
ENV GOLANG_VERSION 1.17.5
ENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_SHA256 bd78114b0d441b029c8fe0341f4910370925a4d270a6a590668840675b0c653e

RUN curl -fsSL "$GOLANG_DOWNLOAD_URL" -o golang.tar.gz \
  && echo "$GOLANG_DOWNLOAD_SHA256  golang.tar.gz" | sha256sum -c - \
  && tar -C /usr/local -xzf golang.tar.gz \
  && rm golang.tar.gz

RUN apt-get update \
  && apt-get install -y git make gcc \
  && rm -rf /var/lib/apt/lists/*

COPY . ./src/

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"

# Use native remote build context to build in any directory
RUN cd src \
  && go build \
  && cd .. \
  && mv src/rosetta-qtum /app/rosetta-qtum \
  && mv src/assets/* /app \
  && rm -rf src

## Build Final Image
FROM ubuntu:22.04

RUN apt-get update && \
  DEBIAN_FRONTEND="noninteractive" apt-get install --no-install-recommends -y libevent-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libboost-all-dev libgmp-dev && \
  apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN mkdir -p /app \
  && chown -R nobody:nogroup /app \
  && mkdir -p /data \
  && chown -R nobody:nogroup /data

WORKDIR /app

# Copy binary from qtumd-builder
COPY --from=qtumd-builder /qtum/src/qtumd  /app/qtumd

# Copy binary from rosetta-builder
COPY --from=rosetta-builder /app/* /app/

# Set permissions for everything added to /app
RUN chmod -R 755 /app/*

CMD ["/app/rosetta-qtum"]